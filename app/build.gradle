plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    // For more details visit https://developer.android.com/guide/navigation/navigation-pass-data#Safe-args
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-parcelize'
}

def static getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd')
    return formattedDate
}

android {
    compileSdk 34
    namespace = "com.tutorials.eu.favdish"

    defaultConfig {
        applicationId "pointzi.dishapp"
        minSdk = 26
        targetSdk = 34
        versionCode 3
        versionName "1.0.0"
        manifestPlaceholders += [app_key: "FavDish"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    packagingOptions {
        exclude 'META-INF/atomicfu.kotlin_module'
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    buildFeatures {
        compose true
        viewBinding true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.9"
    }

    productFlavors {
        continuousIntegration {
            flavorDimensions "ci"
            resValue "string", "app_key", "FavDish"
//            resValue "string", "app_key", "shahzaib_Testb32aab2"
        }
        localDev {
            flavorDimensions "dev"
            resValue "string", "app_key", "FavDish"
        }

        prod {
            flavorDimensions "prod"
            resValue "string", "app_key", "FavDish"
        }

        staging {
            flavorDimensions "staging"
            resValue "string", "app_key", "FavDish_staging"
        }

    }

}
apply from: '../gradle/version.gradle'

dependencies {

    println("Current flavor selected: " + getCurrentFlavor())
    println("SDK Version: " + getContextualSdkVersion())
    if(getCurrentFlavor().contentEquals("localDev")){
        implementation project(":contextual"),  {
            exclude group: 'com.github.bumptech.glide'
            exclude group: 'androidx.room'
        }
    } else if(getCurrentFlavor().contains("continuousIntegration")) {
        // This is used by CI(dev and staging)
//
        implementation(group: "com.contextu.al.dev", name: "contextual", version: getContextualSdkVersion()) {
            exclude group: 'com.github.bumptech.glide'
            exclude group: 'androidx.room'
        }

//        implementation project(":contextual"),  {
//            exclude group: 'com.github.bumptech.glide'
//            exclude group: 'androidx.room'
//        }

    } else {
        // This is used by prod
        implementation(group: "com.contextu.al", name: "contextual", version: getContextualSdkVersion()) {
            exclude group: 'com.github.bumptech.glide'
            exclude group: 'androidx.room'
        }
    }


    //Android-GuideBlocks
    if (getCurrentFlavor().contains("continuousIntegration")) {
        // This is used by CI(dev and staging)
        implementation 'com.github.GuideBlocks-org:Android-GuideBlocks:develop-SNAPSHOT', {
            exclude group: 'com.google.android.material'
            exclude group: 'com.github.bumptech.glide'
            exclude group: 'com.contextu.al'
        }


//    implementation project(":Android-GuideBlocks"), {
//        exclude group: 'com.google.android.material'
//        exclude group: 'com.github.bumptech.glide'
//        exclude group: 'com.contextu.al'
//    }


    } else {
        // This is used by prod
        implementation 'com.github.GuideBlocks-org:Android-GuideBlocks:0.0.17', {
            exclude group: 'com.google.android.material'
            exclude group: 'com.github.bumptech.glide'
            exclude group: 'com.contextu.al'
        }
    }

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'

    // SDP - A scalable size unit library
    // https://github.com/intuit/sdp
    implementation 'com.intuit.sdp:sdp-android:1.0.6'

    // Dexter runtime permissions
    // https://github.com/Karumi/Dexter
    implementation 'com.karumi:dexter:6.2.3'

    // Image loading library
    // For more detail visit the link: https://github.com/bumptech/glide
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    // Room components
    // Reference Link: https://developer.android.com/training/data-storage/room
    def room_version = '2.6.1'
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // These dependencies are already added if you have created the project with BottomNavigationActivity.
    // Lifecycle components
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.0'

    // Navigation
    implementation 'androidx.navigation:navigation-fragment-ktx:2.7.7'
    implementation 'androidx.navigation:navigation-ui-ktx:2.7.7'

    implementation 'androidx.palette:palette-ktx:1.0.0'

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava3:2.9.0'

    // RxJava
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    implementation 'io.reactivex.rxjava3:rxjava:3.0.4'

    // Kotlin + coroutines
    def work_version = "2.9.0"
    implementation "androidx.work:work-runtime-ktx:$work_version"
    implementation("androidx.work:work-runtime:$work_version")
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    //compose
    implementation 'androidx.activity:activity-compose:1.8.2'
    implementation platform('androidx.compose:compose-bom:2022.10.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.runtime:runtime-livedata'
    implementation("androidx.compose.material3:material3:1.2.0")
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:2.7.0")
}

// https://stackoverflow.com/questions/30621183/how-to-get-current-flavor-in-gradle
def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString().toLowerCase()
    if (tskReqStr.contains("prod")) {
        return "prod"
    } else if(tskReqStr.contains("LocalDev")) {
        return "localDev"
    } else if(tskReqStr.contains("staging")){
        return "staging"
    } else {
        // Invoked by CI
        return "continuousIntegration"
    }
}

def getContextualSdkVersion(){
    Properties properties = new Properties()
    properties.load(project.rootProject.file("local.properties").newDataInputStream())
    return properties.getProperty("VERSION_NAME", "3.+")
}